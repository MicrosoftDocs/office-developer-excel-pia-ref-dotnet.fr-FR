<Type Name="FormatConditions" FullName="Microsoft.Office.Interop.Excel.FormatConditions">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ba5c29fb9f36cf63da85041a757db4dd4b830ce1" />
    <Meta Name="ms.sourcegitcommit" Value="e7d3480b6ad64431c29c74a1b422c662de0b511d" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="fr-FR" />
    <Meta Name="ms.lasthandoff" Value="09/24/2018" />
    <Meta Name="ms.locfileid" Value="20587513" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface FormatConditions : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract FormatConditions implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Excel.FormatConditions" />
  <TypeSignature Language="VB.NET" Value="Public Interface FormatConditions&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="public interface class FormatConditions : System::Collections::IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("00024424-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(2)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4096)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="b7d52-101">Cette collection représente la collection des mises en forme conditionnelles d'une plage.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b7d52-101">Represents the collection of conditional formats for a single range.</span>
      </span>
    </summary>
    <remarks>
      <para>
        <span data-ttu-id="b7d52-102">La collection <b>FormatConditions</b> peut contenir jusqu'à trois mises en forme conditionnelles.</span>
        <span class="sxs-lookup">
          <span data-stu-id="b7d52-102">The <b>FormatConditions</b> collection can contain up to three conditional formats.</span>
        </span>
        <span data-ttu-id="b7d52-103">Chaque format est représenté par un <see cref="T:Microsoft.Office.Interop.Excel.FormatCondition" /> objet.</span>
        <span class="sxs-lookup">
          <span data-stu-id="b7d52-103">Each format is represented by a <see cref="T:Microsoft.Office.Interop.Excel.FormatCondition" /> object.</span>
        </span>
      </para>
      <para>
        <span data-ttu-id="b7d52-104">Utiliser le <see cref="P:Microsoft.Office.Interop.Excel.Range.FormatConditions" /> propriété pour renvoyer un objet <b>FormatConditions</b> .</span>
        <span class="sxs-lookup">
          <span data-stu-id="b7d52-104">Use the <see cref="P:Microsoft.Office.Interop.Excel.Range.FormatConditions" /> property to return a <b>FormatConditions</b> object.</span>
        </span>
        <span data-ttu-id="b7d52-105">Utilisez le <see cref="M:Microsoft.Office.Interop.Excel.FormatConditions.Add(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object)" /> méthode pour créer un nouveau format conditionnel et utiliser le <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Modify(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object)" /> méthode modifie un format conditionnel existant.</span>
        <span class="sxs-lookup">
          <span data-stu-id="b7d52-105">Use the <see cref="M:Microsoft.Office.Interop.Excel.FormatConditions.Add(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object)" /> method to create a new conditional format, and use the <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Modify(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object)" /> method to change an existing conditional format.</span>
        </span>
      </para>
      <para>
        <span data-ttu-id="b7d52-106">Si vous essayez de créer plus de trois mises en forme conditionnelles d’une plage, la méthode <b>Add</b> échoue.</span>
        <span class="sxs-lookup">
          <span data-stu-id="b7d52-106">If you try to create more than three conditional formats for a single range, the <b>Add</b> method fails.</span>
        </span>
        <span data-ttu-id="b7d52-107">Si une plage comporte trois mises en forme, vous pouvez utiliser la méthode <b>Modify</b> pour modifier un des formats ou vous pouvez utiliser la <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Delete" /> méthode pour supprimer une mise en forme et puis utiliser la méthode <b>Add</b> pour créer un nouveau format.</span>
        <span class="sxs-lookup">
          <span data-stu-id="b7d52-107">If a range has three formats, you can use the <b>Modify</b> method to change one of the formats, or you can use the <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Delete" /> method to delete a format and then use the <b>Add</b> method to create a new format.</span>
        </span>
      </para>
      <para>
        <span data-ttu-id="b7d52-108">Pour plus d’informations sur les mises en forme conditionnelles, voir la <see cref="T:Microsoft.Office.Interop.Excel.FormatCondition" /> objet.</span>
        <span class="sxs-lookup">
          <span data-stu-id="b7d52-108">For more information about conditional formats, see the <see cref="T:Microsoft.Office.Interop.Excel.FormatCondition" /> object.</span>
        </span>
      </para>
      <para></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="_Default">
      <MemberSignature Language="C#" Value="public object this[object Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object _Default(object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatConditions._Default(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property _Default(Index As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ Index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.TypeLibFunc(1024)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Index">To be added.</param>
        <summary>
          <span data-ttu-id="b7d52-109">Réservé à une utilisation interne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-109">Reserved for internal use.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public object Add (Microsoft.Office.Interop.Excel.XlFormatConditionType Type, object Operator, object Formula1, object Formula2, object String, object TextOperator, object DateOperator, object ScopeType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Add([in]valuetype Microsoft.Office.Interop.Excel.XlFormatConditionType Type, [in]object Operator, [in]object Formula1, [in]object Formula2, [in]object String, [in]object TextOperator, [in]object DateOperator, [in]object ScopeType) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatConditions.Add(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (Type As XlFormatConditionType, Optional Operator As Object, Optional Formula1 As Object, Optional Formula2 As Object, Optional String As Object, Optional TextOperator As Object, Optional DateOperator As Object, Optional ScopeType As Object) As Object" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(181)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Type" Type="Microsoft.Office.Interop.Excel.XlFormatConditionType" />
        <Parameter Name="Operator" Type="System.Object" />
        <Parameter Name="Formula1" Type="System.Object" />
        <Parameter Name="Formula2" Type="System.Object" />
        <Parameter Name="String" Type="System.Object" />
        <Parameter Name="TextOperator" Type="System.Object" />
        <Parameter Name="DateOperator" Type="System.Object" />
        <Parameter Name="ScopeType" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Type">
          <span data-ttu-id="b7d52-110">.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-110"></span>
          </span>
          <span data-ttu-id="b7d52-111">(<see cref="T:Microsoft.Office.Interop.Excel.XlFormatConditionType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-111"></span>
          </span>
          <span data-ttu-id="b7d52-112">Indique si le format conditionnel repose sur la valeur d'une cellule ou sur une expression.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-112">Specifies whether the conditional format is based on a cell value or an expression.</span>
          </span>
        </param>
        <param name="Operator">
          <span data-ttu-id="b7d52-113">L’opérateur du format conditionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-113">The conditional format operator.</span>
          </span>
          <span data-ttu-id="b7d52-114">Peut être une des opérations suivantes <see cref="T:Microsoft.Office.Interop.Excel.XlFormatConditionOperator" /> constantes : <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlBetween" />, <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlEqual" />, <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlGreater" />, <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlGreaterEqual" />, <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlLess" />, <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlLessEqual" />, <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlNotBetween" />, ou <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlNotEqual" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-114">Can be one of the following <see cref="T:Microsoft.Office.Interop.Excel.XlFormatConditionOperator" /> constants: <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlBetween" />, <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlEqual" />, <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlGreater" />, <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlGreaterEqual" />, <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlLess" />, <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlLessEqual" />, <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlNotBetween" />, or <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlNotEqual" />.</span>
          </span>
          <span data-ttu-id="b7d52-115">Si <paramref name="Type" /> est <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionType.xlExpression" />, <paramref name="Operator" /> argument est ignoré.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-115">If <paramref name="Type" /> is <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionType.xlExpression" />, the <paramref name="Operator" /> argument is ignored.</span>
          </span>
        </param>
        <param name="Formula1">
          <span data-ttu-id="b7d52-116">La valeur ou une expression associée à la mise en forme conditionnelle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-116">The value or expression associated with the conditional format.</span>
          </span>
          <span data-ttu-id="b7d52-117">Peut être une constante, une valeur de <b>chaîne</b> , une référence de cellule ou une formule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-117">Can be a constant value, a <b>String</b> value, a cell reference, or a formula.</span>
          </span>
        </param>
        <param name="Formula2">
          <span data-ttu-id="b7d52-118">La valeur ou une expression associée à la seconde partie de la condition format lorsque <paramref name="Operator" /> est <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlBetween" /> ou <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlNotBetween" /> (sinon, cet argument est ignoré).</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-118">The value or expression associated with the second part of the conditional format when <paramref name="Operator" /> is <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlBetween" /> or <see cref="F:Microsoft.Office.Interop.Excel.XlFormatConditionOperator.xlNotBetween" /> (otherwise, this argument is ignored).</span>
          </span>
          <span data-ttu-id="b7d52-119">Peut être une constante, une valeur de chaîne, une référence de cellule ou une formule.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-119">Can be a constant value, a string value, a cell reference, or a formula.</span>
          </span>
        </param>
        <param name="String">To be added.</param>
        <param name="TextOperator">To be added.</param>
        <param name="DateOperator">To be added.</param>
        <param name="ScopeType">To be added.</param>
        <summary>
          <span data-ttu-id="b7d52-120">Ajoute un nouveau format conditionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-120">Adds a new conditional format.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b7d52-121">A <see cref="T:Microsoft.Office.Interop.Excel.FormatCondition" /> object qui représente le nouveau format conditionnel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-121">A <see cref="T:Microsoft.Office.Interop.Excel.FormatCondition" /> object that represents the new conditional format.</span>
          </span>
        </returns>
        <remarks>
          <para>
            <span data-ttu-id="b7d52-122">Vous ne pouvez pas définir plus de trois mises en forme conditionnelles pour une plage.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b7d52-122">You cannot define more than three conditional formats for a range.</span>
            </span>
            <span data-ttu-id="b7d52-123">Utilisez le <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Modify(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object)" /> méthode pour modifier un format conditionnel existant, ou utiliser le <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Delete" /> méthode pour supprimer un format existant avant d’ajouter un nouveau.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b7d52-123">Use the <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Modify(Microsoft.Office.Interop.Excel.XlFormatConditionType,System.Object,System.Object,System.Object)" /> method to modify an existing conditional format, or use the <see cref="M:Microsoft.Office.Interop.Excel.FormatCondition.Delete" /> method to delete an existing format before adding a new one.</span>
            </span>
          </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAboveAverage">
      <MemberSignature Language="C#" Value="public object AddAboveAverage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AddAboveAverage() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatConditions.AddAboveAverage" />
      <MemberSignature Language="VB.NET" Value="Public Function AddAboveAverage () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AddAboveAverage();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2621)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b7d52-124">Renvoie une nouvelle <see cref="T:Microsoft.Office.Interop.Excel.AboveAverage" /> objet qui représente une règle de mise en forme conditionnelle pour la plage spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-124">Returns a new <see cref="T:Microsoft.Office.Interop.Excel.AboveAverage" /> object representing a conditional formatting rule for the specified range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b7d52-125">
            <see cref="T:Microsoft.Office.Interop.Excel.AboveAverage" />objet</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-125">
              <see cref="T:Microsoft.Office.Interop.Excel.AboveAverage" /> object</span>
          </span>
        </returns>
        <remarks>
          <para>
            <span data-ttu-id="b7d52-126">Le <see cref="T:Microsoft.Office.Interop.Excel.AboveAverage" /> objet est utilisé pour rechercher des valeurs au-dessus ou en dessous d’une moyenne ou l’écart-type dans une plage de cellules.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b7d52-126">The <see cref="T:Microsoft.Office.Interop.Excel.AboveAverage" /> object is used to find values above or below an average or standard deviation in a range of cells.</span>
            </span>
            <span data-ttu-id="b7d52-127">Par exemple, vous pouvez trouver les intervenants moyennes ci-dessus dans un rapport annuel sur les performances ou vous pouvez localiser fabriqués matières qui se situent sous deux écarts dans une évaluation de la qualité.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b7d52-127">For example, you can find the above average performers in an annual performance review or you can locate manufactured materials that fall below two standard deviations in a quality rating.</span>
            </span>
          </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddColorScale">
      <MemberSignature Language="C#" Value="public object AddColorScale (int ColorScaleType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AddColorScale([in]int32 ColorScaleType) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatConditions.AddColorScale(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddColorScale (ColorScaleType As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AddColorScale(int ColorScaleType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2616)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ColorScaleType" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ColorScaleType">
          <span data-ttu-id="b7d52-128">Type d'échelle de couleur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-128">The type of color scale.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b7d52-129">Renvoie une nouvelle <see cref="T:Microsoft.Office.Interop.Excel.ColorScale" /> objet qui représente une règle de mise en forme conditionnelle qui utilise des dégradés dans les couleurs des cellules pour symboliser des différences relatives dans les valeurs des cellules d’une plage sélectionnée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-129">Returns a new <see cref="T:Microsoft.Office.Interop.Excel.ColorScale" /> object representing a conditional formatting rule that uses gradations in cell colors to indicate relative differences in the values of cells included in a selected range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b7d52-130">
            <see cref="T:Microsoft.Office.Interop.Excel.ColorScale" />objet</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-130">
              <see cref="T:Microsoft.Office.Interop.Excel.ColorScale" /> object</span>
          </span>
        </returns>
        <remarks>
          <para>
            <span data-ttu-id="b7d52-p110">Les échelles de couleur sont des repères visuels qui vous aident à comprendre la répartition et la variation des données. Une échelle de couleur vous permet d'identifier les différences relatives entre les valeurs des cellules d'une plage donnée à l'aide d'une variation de couleur. Les couleurs et les dégradés représentent les différences entre les valeurs des cellules. Par exemple, dans une échelle de trois couleurs, vous pouvez spécifier que les cellules comportant les valeurs les plus élevées sont en vert, celles avec des valeurs intermédiaires sont en jaune et celles avec les valeurs les plus faibles sont en rouge.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b7d52-p110">Color scales are visual guides that help you understand data distribution and variation. A color scale helps you identify relative differences in the values of cells in a given range by using color variation. Different colors and gradations between colors represent differences in cell values. For example, in a three-color scale, you can specify that cells with the highest relative data values are green, cells with intermediate values are yellow, and cells with the lowest values are red.</span>
            </span>
          </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDatabar">
      <MemberSignature Language="C#" Value="public object AddDatabar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AddDatabar() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatConditions.AddDatabar" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDatabar () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AddDatabar();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2618)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b7d52-135">Renvoie un <see cref="T:Microsoft.Office.Interop.Excel.Databar" /> objet qui représente une règle de mise en forme conditionnelle pour la plage spécifiée de la barre de données.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-135">Returns a <see cref="T:Microsoft.Office.Interop.Excel.Databar" /> object representing a data bar conditional formatting rule for the specified range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b7d52-136">
            <see cref="T:Microsoft.Office.Interop.Excel.Databar" />objet</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-136">
              <see cref="T:Microsoft.Office.Interop.Excel.Databar" /> object</span>
          </span>
        </returns>
        <remarks>
          <para>
            <span data-ttu-id="b7d52-p111">Les barres de données vous aident à mieux voir la valeur d'une cellule par rapport aux autres cellules. La longueur de la barre de données représente la valeur de la cellule. Plus la barre est longue, plus la valeur est élevée et inversement. Les barres de données permettent de mettre en évidence les nombres les plus élevés et les plus faibles, en particulier dans de grandes quantités de données, par exemple les jouets les plus vendus et les moins vendus dans un rapport des ventes en période festive.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b7d52-p111">Data bars help you see the value of a cell relative to other cells. The length of the data bar represents the value in the cell. A longer bar represents a higher value and a shorter bar represents a lower value. Data bars are useful in spotting higher and lower numbers especially with large amounts of data, such as top and bottom selling toys in a holiday sales report.</span>
            </span>
          </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddIconSetCondition">
      <MemberSignature Language="C#" Value="public object AddIconSetCondition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AddIconSetCondition() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatConditions.AddIconSetCondition" />
      <MemberSignature Language="VB.NET" Value="Public Function AddIconSetCondition () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AddIconSetCondition();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2619)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b7d52-141">Renvoie une nouvelle <see cref="T:Microsoft.Office.Interop.Excel.IconSetCondition" /> objet qui représente une icône de définie une règle de mise en forme conditionnelle pour la plage spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-141">Returns a new <see cref="T:Microsoft.Office.Interop.Excel.IconSetCondition" /> object which represents an icon set conditional formatting rule for the specified range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b7d52-142">
            <see cref="T:Microsoft.Office.Interop.Excel.IconSetCondition" />objet</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-142">
              <see cref="T:Microsoft.Office.Interop.Excel.IconSetCondition" /> object</span>
          </span>
        </returns>
        <remarks>
          <para>
            <span data-ttu-id="b7d52-p112">Utilisez un jeu d'icônes pour annoter et classifier les données en catégories, de trois à cinq, séparées par une valeur seuil. Chaque icône représente une plage de valeurs. Par exemple, dans le jeu d'icônes 3 Flèches, la flèche rouge pointant vers le haut représente les valeurs les plus élevées, la flèche transversale jaune représente les valeurs intermédiaires et la flèche verte pointant vers le bas représente les valeurs les plus faibles.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b7d52-p112">Use an icon set to annotate and classify data into three to five categories separated by a threshold value. Each icon represents a range of values. For example, in the 3 Arrows icon set, the red up arrow represents higher values, the yellow sideways arrow represents middle values, and the green down arrow represents lower values.</span>
            </span>
          </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTop10">
      <MemberSignature Language="C#" Value="public object AddTop10 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AddTop10() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatConditions.AddTop10" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTop10 () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AddTop10();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2620)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b7d52-146">Renvoie un <see cref="T:Microsoft.Office.Interop.Excel.Top10" /> objet qui représente une règle de mise en forme conditionnelle pour la plage spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-146">Returns a <see cref="T:Microsoft.Office.Interop.Excel.Top10" /> object representing a conditional formatting rule for the specified range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b7d52-147">
            <see cref="T:Microsoft.Office.Interop.Excel.Top10" />objet</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-147">
              <see cref="T:Microsoft.Office.Interop.Excel.Top10" /> object</span>
          </span>
        </returns>
        <remarks>
          <para>
            <span data-ttu-id="b7d52-148">À l’aide de la <see cref="T:Microsoft.Office.Interop.Excel.Top10" /> objet, vous pouvez trouver les valeurs maximale et minimale d’une plage de cellules en fonction d’une valeur que vous spécifiez.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b7d52-148">Using the <see cref="T:Microsoft.Office.Interop.Excel.Top10" /> object, you can find the highest and lowest values in a range of cells based on a cutoff value that you specify.</span>
            </span>
            <span data-ttu-id="b7d52-149">Par exemple, vous trouverez les cinq produits les ventes dans un rapport régional, les 15 derniers pour cent de produits dans une enquête client ou les 25 meilleurs salaires dans une analyse du personnel de service.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b7d52-149">For example, you can find the top five selling products in a regional report, the bottom 15 percent of products in a customer survey, or the top 25 salaries in a department personnel analysis.</span>
            </span>
          </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddUniqueValues">
      <MemberSignature Language="C#" Value="public object AddUniqueValues ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AddUniqueValues() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatConditions.AddUniqueValues" />
      <MemberSignature Language="VB.NET" Value="Public Function AddUniqueValues () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AddUniqueValues();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2622)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b7d52-150">Renvoie une nouvelle <see cref="T:Microsoft.Office.Interop.Excel.UniqueValues" /> objet qui représente une règle de mise en forme conditionnelle pour la plage spécifiée.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-150">Returns a new <see cref="T:Microsoft.Office.Interop.Excel.UniqueValues" /> object representing a conditional formatting rule for the specified range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b7d52-151">
            <see cref="T:Microsoft.Office.Interop.Excel.UniqueValues" />objet</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-151">
              <see cref="T:Microsoft.Office.Interop.Excel.UniqueValues" /> object</span>
          </span>
        </returns>
        <remarks>
          <para>
            <span data-ttu-id="b7d52-152">Vous pouvez utiliser la <see cref="T:Microsoft.Office.Interop.Excel.UniqueValues" /> objet pour voir rapidement les cellules qui contiennent des valeurs uniques ou en doublons.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b7d52-152">You can use the <see cref="T:Microsoft.Office.Interop.Excel.UniqueValues" /> object to quickly visualize cells that contain either unique or duplicate values.</span>
            </span>
          </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Excel.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatConditions.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::Application ^ Application { Microsoft::Office::Interop::Excel::Application ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(148)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b7d52-153">Renvoie un <see cref="T:Microsoft.Office.Interop.Excel.Application" /> object qui représente l’application Microsoft Excel.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-153">Returns an <see cref="T:Microsoft.Office.Interop.Excel.Application" /> object that represents the Microsoft Excel application.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatConditions.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(118)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(118)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b7d52-154">Renvoie le nombre d'objets dans la collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-154">Returns the number of objects in the collection.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Creator">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Excel.XlCreator Creator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Excel.XlCreator Creator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatConditions.Creator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Creator As XlCreator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Excel::XlCreator Creator { Microsoft::Office::Interop::Excel::XlCreator get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(149)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Excel.XlCreator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b7d52-155">Renvoie un nombre entier de 32 bits qui indique l’application dans laquelle cet objet a été créé.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-155">Returns a 32-bit integer that indicates the application in which this object was created.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>
            <span data-ttu-id="b7d52-156">Si l’objet a été créé dans Microsoft Excel, cette propriété renvoie la chaîne XCEL qui équivaut au nombre hexadécimal 5843454C.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b7d52-156">If the object was created in Microsoft Excel, this property returns the string XCEL, which is equivalent to the hexadecimal number 5843454C.</span>
            </span>
          </para>
          <para>
            <span data-ttu-id="b7d52-157">La propriété <b>Creator</b> est conçue pour être utilisée dans Microsoft Excel pour Macintosh, où chaque application possède un code de créateur de quatre caractères.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b7d52-157">The <b>Creator</b> property is designed to be used in Microsoft Excel for the Macintosh, where each application has a four-character creator code.</span>
            </span>
            <span data-ttu-id="b7d52-158">Par exemple, Microsoft Excel possède le code créateur XCEL.</span>
            <span class="sxs-lookup">
              <span data-stu-id="b7d52-158">For example, Microsoft Excel has the creator code XCEL.</span>
            </span>
          </para>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public void Delete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Delete() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatConditions.Delete" />
      <MemberSignature Language="VB.NET" Value="Public Sub Delete ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Delete();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(117)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b7d52-159">Supprime l'objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-159">Deletes the object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatConditions.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-4)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.TypeLibFunc(1024)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object Item (object Index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Item([in]object Index) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Excel.FormatConditions.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Item (Index As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Item(System::Object ^ Index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(170)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Index">
          <span data-ttu-id="b7d52-160">
            <b>Objet</b>obligatoire.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-160">Required <b>Object</b>.</span>
          </span>
          <span data-ttu-id="b7d52-161">Numéro d'index de l'objet.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-161">The index number for the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b7d52-162">Renvoie un seul objet d'une collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-162">Returns a single object from a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b7d52-163">
            <b>Objet</b>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-163">
              <b>Object</b>
            </span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Excel.FormatConditions.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parent { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Excel</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(150)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b7d52-164">Cette propriété renvoie l'objet parent de l'objet spécifié.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7d52-164">Returns the parent object for the specified object.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>